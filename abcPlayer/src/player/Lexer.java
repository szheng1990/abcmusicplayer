package player;

import java.util.ArrayList;

import player.Token.Type;

public class Lexer {
	
	/**
	 * Creates the lexer over the passed string
	 * 
	 * @param string
	 *               The string to tokenize
	 */
     
	private ArrayList<Token> tokens;
	
	public Lexer(String string){
	    
	    String[] lines = string.split("[\n]");
	    this.tokens = new ArrayList<Token>();
	    
	    boolean header = true;
	    
	    for(int i = 0; i < lines.length; i ++){
	        String line = lines[i];
	        if(i == 0){
	            //Expecting X-line
	            if(line.indexOf("X:") != 0){
	                throw new IllegalArgumentException("Expecting X-line");
	            }
	            this.tokens.add(new Token(Token.Type.HEADER_LINE, line));
	        }else if(i == 1){
	            //Expecting T-line
	            if(line.indexOf("T:") != 0){
	                throw new IllegalArgumentException("Expecting T-line");
	            }
	            this.tokens.add(new Token(Token.Type.HEADER_LINE, line));
	        }else{
	            
	            //If Header, find
	            if(header){
	                //Found header
	                if(line.indexOf(":") >=0){
	                    this.tokens.add(new Token(Token.Type.HEADER_LINE, line));
                    }
	                if(line.indexOf("K:") == 0){
	                    header = false;
	                }
	            }else{
	                //Not expecting Header
	                if(line.indexOf("V:") == 0){
	                    this.tokens.add(new Token(Token.Type.VOICE, line));
	                }else{
	                    ArrayList<Token> lineTokens = lexLine(line);
	                    this.tokens.addAll(lineTokens);
	                }
	                
	            }
	           
	        }
	    }
		
	}
	
	public ArrayList<Token> lexLine(String line){
	    
	    //Check if input is header
	    
	    
	    //If input is linen in body: iterate through the input string and identify tokens;
        // append tokens to a global output list
        ArrayList<Token> output = new ArrayList<Token>();
        int length = line.length();
        int current = 0;
        while (current < length) {
            boolean anyMatchSoFar = false;
            for (int i = length; i > current; i--) {
                String currentString = line.substring(current, i);
                for (Type t : Token.Type.values()) {
                    Token testToken = new Token(t, "");
                    if (testToken.pattern.matcher(currentString).matches()) {
                        // a token has been identified
                        anyMatchSoFar = true;
                        current = i;
                        output.add(new Token(t, currentString));
                        
                    }

                }
            }

            if (!anyMatchSoFar) {
                // indicates a blank space: skip to the next position
                current++;
            }
        }
        return output;
	}
	
	/**
	 * @return A copy of the list of tokens generated by the lexer
	 */
	public ArrayList<Token> getTokens() {
	    return new ArrayList<Token>(tokens);
	}
}
